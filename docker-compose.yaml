services:
  docker-registry:
    container_name: registry
    image: registry:2
    ports:
      - "5000:5000"
    restart: always
    volumes:
      - ./cdn:/var/lib/registry
      - ./auth:/auth
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/registry.password
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
  influxdb2:
    image: influxdb:2
    ports:
      - "8086:8086"
    restart: always
    environment:
      DOCKER_INFLUXDB_INIT_BUCKET: argon
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_ORG: argon
      DOCKER_INFLUXDB_INIT_PASSWORD: Arg0n@28
      DOCKER_INFLUXDB_INIT_RETENTION: 0
      DOCKER_INFLUXDB_INIT_USERNAME: watcher0
    volumes:
      - "./flex_data:/var/lib/influxdb2"
      - "./flex_config:/etc/influxdb2"
  mixer:
    image: reg.svck.dev/svck-dev/log-mixer:11
    ports: [ "3000:3000" ]
    restart: always
    environment:
      INFLUX_DB_URL: http://influxdb2:8086
      INFLUX_DB_ORG: argon
      INFLUX_DB_BUCKET: argon
      INFLUX_DB_TOKEN: 908s0w7Xdo8M4KYeIGnYZcnqKoAKYua7pD6jpK9Az6ySp1j8EnkdoSuU8vXTv7pHMKF8XoDEoURJ1cNqd-7F2A==
  proxy:
    image: caddy:2-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"
    volumes:
      - './Caddyfile:/etc/caddy/Caddyfile'
      - './caddy_data:/data'
      - './caddy_config:/config'
      - './server_shared:/etc/caddy/shared'
      - './public:/var/www/public'
  #
  #  logstash:
  #    image: docker.elastic.co/logstash/logstash:8.5.1
  #    container_name: logstash
  #    environment:
  #      - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200
  #      - xpack.monitoring.elasticsearch.ssl.verification_mode=none
  #      - xpack.monitoring.elasticsearch.username=${ES_USERNAME}
  #      - xpack.monitoring.elasticsearch.password=${ES_PASSWORD}
  #    restart: always
  #    ports:
  #      - "5044:5044"
  #    volumes:
  #      - ./logstash/config:/usr/share/logstash/config
  #      - ./logstash/pipeline:/usr/share/logstash/pipeline
  #    depends_on:
  #      - elasticsearch

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '

  es01:
    restart: always
    depends_on:
      - setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    #    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
  
  kibana:
    restart: always
    depends_on:
      - es01
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
  #    mem_limit: ${KB_MEM_LIMIT}

  logstash01:
    restart: always
    depends_on:
      - es01
      - kibana
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200

volumes:
  certs: { }
  esdata01: { }
  kibanadata: { }
  metricbeatdata01: { }
  filebeatdata01: { }
  logstashdata01: { }

networks:
  default:
    name: elastic
    external: false